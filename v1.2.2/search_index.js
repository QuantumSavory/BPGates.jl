var documenterSearchIndex = {"docs":
[{"location":"noisy/#noisy-gates","page":"Noisy Gates","title":"Noisy Gates","text":"","category":"section"},{"location":"noisy/#Pauli-Noise","page":"Noisy Gates","title":"Pauli Noise","text":"","category":"section"},{"location":"noisy/","page":"Noisy Gates","title":"Noisy Gates","text":"PauliNoiseOp performs Pauli noise of given magnitude (chaces for X, Y, and Z errors). It is used as a primitive inside of noisy operations.","category":"page"},{"location":"noisy/","page":"Noisy Gates","title":"Noisy Gates","text":"julia> apply!(BellState([0,0]), PauliNoiseOp(1,1,0,0))\nBellState(Bool[0, 1])\n\njulia> apply!(BellState([0,0]), PauliNoiseOp(1,0,1,0))\nBellState(Bool[1, 1])\n\njulia> apply!(BellState([0,0]), PauliNoiseOp(1,0,0,1))\nBellState(Bool[1, 0])","category":"page"},{"location":"noisy/#Noisy-gate-wrapper","page":"Noisy Gates","title":"Noisy gate wrapper","text":"","category":"section"},{"location":"noisy/","page":"Noisy Gates","title":"Noisy Gates","text":"PauliNoiseBellGate can be used to wrap a normal gate with a noise process.","category":"page"},{"location":"noisy/#Noisy-measurements","page":"Noisy Gates","title":"Noisy measurements","text":"","category":"section"},{"location":"noisy/","page":"Noisy Gates","title":"Noisy Gates","text":"NoisyBellMeasureNoisyReset performs a BellMeasurement with a chance p to report the opposite result for a coincidence measurement, and chances px, py, and pz to flip the new Bell state to (respectively) one of the other 3 Bell states.","category":"page"},{"location":"noisy/","page":"Noisy Gates","title":"Noisy Gates","text":"It implements applywstatus! which enables its use with mctrajectories from QuantumClifford.","category":"page"},{"location":"most_common/#cnotlike-gates","page":"Most Common Gates","title":"CNOT-like Purification Gates","text":"","category":"section"},{"location":"most_common/","page":"Most Common Gates","title":"Most Common Gates","text":"As a reminder, we have the following basis states (written in binary, in decimal, and as list of stabilizers):","category":"page"},{"location":"most_common/","page":"Most Common Gates","title":"Most Common Gates","text":"00 = 0 = +XX\n         +ZZ\n\n01 = 1 = +XX\n         -ZZ\n\n10 = 2 = -XX\n         +ZZ\n\n11 = 3 = -XX\n         -ZZ","category":"page"},{"location":"most_common/","page":"Most Common Gates","title":"Most Common Gates","text":"If we consider purification circuits that preserve the 00 state, the majority of useful gates in purification circuits can be written in the form:","category":"page"},{"location":"most_common/","page":"Most Common Gates","title":"Most Common Gates","text":"<img style=\"width:50%\" src=\"../a_good_bp_gate.png\">","category":"page"},{"location":"most_common/","page":"Most Common Gates","title":"Most Common Gates","text":"Above the entangled pairs are qubit 1&3 and qubits 2&4.","category":"page"},{"location":"most_common/","page":"Most Common Gates","title":"Most Common Gates","text":"The main property of this type of circuits is that they always map the \"good\" state to itself, while they permute the rest of the Bell basis states.","category":"page"},{"location":"most_common/","page":"Most Common Gates","title":"Most Common Gates","text":"The h_aotimes h_b (and f_aotimes f_b) can be one of the six permutations of 01, 10, 11, implemented by single-qubit Clifford gates. There are 6 possible such operations. The hard-coded CNOT gate provides the necessary entangling.","category":"page"},{"location":"most_common/","page":"Most Common Gates","title":"Most Common Gates","text":"These gates are implemented as CNOTPerm.","category":"page"},{"location":"most_common/","page":"Most Common Gates","title":"Most Common Gates","text":"The 6 permutations (i.e. the gates h_aotimes h_b and f_aotimes f_b) are:","category":"page"},{"location":"most_common/","page":"Most Common Gates","title":"Most Common Gates","text":"BPGates.good_perm_tuple","category":"page"},{"location":"most_common/","page":"Most Common Gates","title":"Most Common Gates","text":"The gates represented as Clifford operations are:","category":"page"},{"location":"most_common/","page":"Most Common Gates","title":"Most Common Gates","text":"TODO finish this listing","category":"page"},{"location":"#BPGates.jl","page":"BPGates.jl","title":"BPGates.jl","text":"","category":"section"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"Faster Bell-preserving gates for Clifford circuit simulators like QuantumClifford.jl. As long as you are simulating only purification circuits on Bell pairs with only incoherent noise, this tool will be order of magnitudes faster than any other approach. It relies on the fact that all gates in purification circuits are simply permutations of the Bell basis, thus as long as you represent your gates as permutations, and your multi-pair state as a string of Bell basis vectors, operations can be very fast.","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"On the left, you can explore links to the variety of operations available for simulation. The Full API autogenerated list is a useful reference as well.","category":"page"},{"location":"#Introduction","page":"BPGates.jl","title":"Introduction","text":"","category":"section"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"The simulator is capable of representing only tensor products of one or more of the stabilizer states","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"±XX\n±ZZ","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"by tracking only the phases in the first column. For example, +XX -ZZ is represented as the bitstring 01. Gates are internally represented as permutations of the Bell basis (i.e. single-qubit gates are permutations of the four binary numbers 00, 01, 10, 11).","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"The 00 state, i.e. the state stabilized by +XX +ZZ, is considered somewhat special in some simulations, as the \"desired state\". If your goals are different, just assume an implicit basis change.","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"This representation permits drastically faster simulation of entanglement purification circuits.","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"The simulator is presented in detail in this paper and below you can view a talk and slide deck including discussion about this tool (among others). Useful preliminaries are discussed and the software itself is presented from 25min27sec onwards.","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"<video id=\"vid1\" src=\"https://presentations.krastanov.org/2022-Efficient_Entanglement_Modeling/2022-IQUISE_talk_purification_and_entanglement_modeling/video_recording.mp4\" style=\"height:360px;width:640px;\" controls></video>\n<script>\ndocument.getElementById('vid1').addEventListener('loadedmetadata', function() {\n  this.currentTime = 1527;\n}, false);\n</script>\n<iframe src=\"https://presentations.krastanov.org/2022-Efficient_Entanglement_Modeling/2022-IQUISE_talk_purification_and_entanglement_modeling/presentation/index.html#/3/0\" style=\"height:360px;width:640px;\"></iframe>","category":"page"},{"location":"#Basis-States","page":"BPGates.jl","title":"Basis States","text":"","category":"section"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"As mentioned above, we can represent only Bell states. Here is the basis being used:","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"BPGates notation Stabilizer tableaux Kets in X basis in Y basis\n00 +XX +ZZ ∣00⟩+∣11⟩ ∣++⟩+∣--⟩ ∣i₊i₋⟩+∣i₋i₊⟩\n01 +XX -ZZ ∣01⟩+∣10⟩ ∣++⟩-∣--⟩ ∣i₊i₊⟩-∣i₋i₋⟩\n10 -XX +ZZ ∣00⟩-∣11⟩ ∣+-⟩+∣-+⟩ ∣i₊i₊⟩+∣i₋i₋⟩\n11 -XX -ZZ ∣01⟩-∣10⟩ ∣+-⟩-∣-+⟩ ∣i₊i₋⟩-∣i₋i₊⟩","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"You can convert between these descriptions using","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"BPGates to stabilizer state with QuantumClifford.Stabilizer(bpgates_state)\nstabilizer state to state vector ket with QuantumOptics.Ket","category":"page"},{"location":"#Benchmarks","page":"BPGates.jl","title":"Benchmarks","text":"","category":"section"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"Below you can see the time it takes to perform a single bilateral CNOT gate (the vertical axis) versus the size of the state being acted upon (the number of Bell pairs, horizontal axis). The exponential curves are for the dense and sparse operators acting on kets (as implemented in QuantumOptics.jl). The linearly growing curve is for a Clifford circuit simulation in the tableau formalism (from QuantumClifford.jl which is one of the fastest available implementations).","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"The flat curve in the nanosecond range is for our implementation.","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"All of these methods would require a Monte Carlo Quantum Trajectories simulation to model noisy circuits, which we discuss in the section on noisy gates","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"(Image: )","category":"page"},{"location":"#Short-Example","page":"BPGates.jl","title":"Short Example","text":"","category":"section"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"You can initialize a Bell State by specifying the phases and convert it to stabilizer representation.","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"julia> bell_state = BellState([0,1,1,0])\nBellState(Bool[0, 1, 1, 0])\n\njulia> Stabilizer(bell_state)\n+ XX__\n- ZZ__\n- __XX\n+ __ZZ","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"You can apply a Pauli Permutation (similarly for single pair permutations or double pair permutations).","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"julia> BellPauliPermutation(1,1)*BellState(1) |> Stabilizer\n+ XX\n+ ZZ","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"You can apply a full BP Gate which is the most general representation of a Bell preserving gate on two Bell pairs. The general gate consists of a two Pauli permutations on qubits of one Bell pair, a double pair permutation and two single pair permutations.","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"julia> apply!(BellState([0,1,1,0]), BellGate(1,2,10,5,6,1,2))\nBellState(Bool[0, 0, 0, 0])","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"You can apply a coincidence measurement on the bell states, which will be reset after measurement.","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"julia> bellmeasure!(BellState([0,1,1,1]), BellMeasure(2,1))\n(BellState(Bool[0, 0, 1, 1]), false)","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"You can also apply noisy permutations and measurements.","category":"page"},{"location":"","page":"BPGates.jl","title":"BPGates.jl","text":"julia> apply!(BellState([0,0]), PauliNoiseOp(1,1,0,0))\nBellState(Bool[0, 1])\n\njulia> apply!(BellState([0,1,1,1]), NoisyBellMeasure(2,1))\n(BellState(Bool[0, 0, 1, 1]), false)","category":"page"},{"location":"measurements/#measurements","page":"Coincidence Measurements","title":"Coincidence Measurements","text":"","category":"section"},{"location":"measurements/","page":"Coincidence Measurements","title":"Coincidence Measurements","text":"Coincidence measurements are implemented by BellMeasure. There are three possible types of measurements, one for each basis X, Y, and Z.","category":"page"},{"location":"measurements/","page":"Coincidence Measurements","title":"Coincidence Measurements","text":"BellMeasure is supported by QuantumClifford's apply!, but more importantly, it is supported by mctrajectories, which provides for an easy way to run multiple Monte Carlo simulation trajectories. A successful coincidence measurement lets the simulations continue. A failed coincidence ends the simulations with a reported error.","category":"page"},{"location":"measurements/#Measurement-results-depending-on-basis","page":"Coincidence Measurements","title":"Measurement results depending on basis","text":"","category":"section"},{"location":"measurements/","page":"Coincidence Measurements","title":"Coincidence Measurements","text":"As seen in the code example below, the meaning of the measurements is as follows","category":"page"},{"location":"measurements/","page":"Coincidence Measurements","title":"Coincidence Measurements","text":"Call Basis & Check States passed\nBellMeasure(1,_) X coincidence 00&01\nBellMeasure(2,_) Y anticoincidence 00&11\nBellMeasure(3,_) Z coincidence 00&10","category":"page"},{"location":"measurements/","page":"Coincidence Measurements","title":"Coincidence Measurements","text":"For reference, here are the states in different representations","category":"page"},{"location":"measurements/","page":"Coincidence Measurements","title":"Coincidence Measurements","text":"BPGates notation Stabilizer tableaux Kets in X basis in Y basis\n00 +XX +ZZ ∣00⟩+∣11⟩ ∣++⟩+∣--⟩ ∣i₊i₋⟩+∣i₋i₊⟩\n01 +XX -ZZ ∣01⟩+∣10⟩ ∣++⟩-∣--⟩ ∣i₊i₊⟩-∣i₋i₋⟩\n10 -XX +ZZ ∣00⟩-∣11⟩ ∣+-⟩+∣-+⟩ ∣i₊i₊⟩+∣i₋i₋⟩\n11 -XX -ZZ ∣01⟩-∣10⟩ ∣+-⟩-∣-+⟩ ∣i₊i₋⟩-∣i₋i₊⟩","category":"page"},{"location":"measurements/","page":"Coincidence Measurements","title":"Coincidence Measurements","text":"all_states = [BellState([0,0]), BellState([1,0]), BellState([0,1]), BellState([1,1])];\nfilter_true(meas) = [state\n    for state in all_states\n    if bellmeasure!(copy(state), meas)[2]];\nfilter_true(BellMeasure(1,1))\nfilter_true(BellMeasure(2,1))\nfilter_true(BellMeasure(3,1))","category":"page"},{"location":"API/#Full-API","page":"API","title":"Full API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"<style>\n    .content table td {\n        padding-top: 0 !important;\n        padding-bottom: 0 !important;\n    }\n</style>","category":"page"},{"location":"API/#States","page":"API","title":"States","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Use BellState to represent a tensor product of Bell states.","category":"page"},{"location":"API/","page":"API","title":"API","text":"We can represent only Bell states. Here is the basis being used:","category":"page"},{"location":"API/","page":"API","title":"API","text":"BPGates notation Stabilizer tableaux Kets in X basis in Y basis\n00 +XX +ZZ ∣00⟩+∣11⟩ ∣++⟩+∣--⟩ ∣i₊i₋⟩+∣i₋i₊⟩\n01 +XX -ZZ ∣01⟩+∣10⟩ ∣++⟩-∣--⟩ ∣i₊i₊⟩-∣i₋i₋⟩\n10 -XX +ZZ ∣00⟩-∣11⟩ ∣+-⟩+∣-+⟩ ∣i₊i₊⟩+∣i₋i₋⟩\n11 -XX -ZZ ∣01⟩-∣10⟩ ∣+-⟩-∣-+⟩ ∣i₊i₋⟩-∣i₋i₊⟩","category":"page"},{"location":"API/","page":"API","title":"API","text":"You can convert between these descriptions using","category":"page"},{"location":"API/","page":"API","title":"API","text":"BPGates to stabilizer state with QuantumClifford.Stabilizer(bpgates_state)\nstabilizer state to state vector ket with QuantumOptics.Ket","category":"page"},{"location":"API/#Operations","page":"API","title":"Operations","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Most often you would only need CNOTPerm as an operation type. There is a documentation section dedicated to it. It is of the following form:","category":"page"},{"location":"API/","page":"API","title":"API","text":"<img style=\"width:50%\" src=\"../a_good_bp_gate.png\">","category":"page"},{"location":"API/","page":"API","title":"API","text":"The most general gate is BellGate. It is built out of smaller gates. It is of the following form:","category":"page"},{"location":"API/","page":"API","title":"API","text":"<img style=\"width:50%\" src=\"../general_bp_gate.png\">","category":"page"},{"location":"API/","page":"API","title":"API","text":"For measurements use BellMeasure which provides coincidence measurements as described in their section of the documentation.","category":"page"},{"location":"API/","page":"API","title":"API","text":"For noisy operations you can use TODO.","category":"page"},{"location":"API/","page":"API","title":"API","text":"The QuantumClifford.apply! function and company (e.g. mctrajectory) can be used for these operations.","category":"page"},{"location":"API/#Autogenerated-API-list","page":"API","title":"Autogenerated API list","text":"","category":"section"},{"location":"API/#BPGates.BellDoublePermutation","page":"API","title":"BPGates.BellDoublePermutation","text":"Bell preserving gate performing one of 20 possible \"Clifford phaseless two-pair permutations\" on a two Bell pairs.\n\nEquivalent to applying the same two-qubit Clifford gate to both Alice's and Bob's half-pairs.\n\nThe first argument, pidx, specifies the permutation (between 1 and 20). The second argument, sidx indicates which Bell pairs are acted on.\n\n\n\n\n\n","category":"type"},{"location":"API/#BPGates.BellGate","page":"API","title":"BPGates.BellGate","text":"Most general representation of a Bell preserving gate on two qubits. The general gate consists of a two Pauli permutations, a double qubit permutation, two single qubit permutations, and two indices indicating which pair of Bell states the general Bell preserving gate will be applied to.\n\n\n\n\n\n","category":"type"},{"location":"API/#BPGates.BellMeasure","page":"API","title":"BPGates.BellMeasure","text":"Coincidence measurement on Bell pairs.\n\nThe first argument, midx, specifies the X, Y, Z basis respectively. The second argument, sidx, indicates which Bell pair is being measured.\n\nThe state will be reset to 00 after being applied measurement.\n\n\n\n\n\n","category":"type"},{"location":"API/#BPGates.BellPauliPermutation","page":"API","title":"BPGates.BellPauliPermutation","text":"Bell preserving gate performing one of 4 possible \"Pauli permutations\" on a single Bell pair.\n\nEquivalent to applying a Pauli gate to Alice's side of the Bell pair.\n\nThe first argument, pidx, specifies the permutation (between 1 and 4). The second argument, sidx indicates which Bell pair is acted on.\n\njulia> BellPauliPermutation(1,1)*BellState(1) |> Stabilizer\n+ XX\n+ ZZ\n\njulia> BellPauliPermutation(2,1)*BellState(1) |> Stabilizer\n+ XX\n- ZZ\n\njulia> BellPauliPermutation(3,1)*BellState(1) |> Stabilizer\n- XX\n+ ZZ\n\njulia> BellPauliPermutation(4,1)*BellState(1) |> Stabilizer\n- XX\n- ZZ\n\n\n\n\n\n","category":"type"},{"location":"API/#BPGates.BellSinglePermutation","page":"API","title":"BPGates.BellSinglePermutation","text":"Bell preserving gate performing one of 6 possible \"Clifford phaseless permutations\" on a single Bell pair.\n\nEquivalent to applying certain single-qubit Clifford gates to both Alice and Bob.\n\nThe first argument, pidx, specifies the permutation (between 1 and 6). The second argument, sidx indicates which Bell pair is acted on.\n\n\n\n\n\n","category":"type"},{"location":"API/#BPGates.BellState","page":"API","title":"BPGates.BellState","text":"A diagonal representation of Bell diagonal states that only tracks the phases in front of the stabilizers tableau instead of the whole stabilizer tableau.\n\nCapable of representing only tensor products of one or more of the states\n\n±XX\n±ZZ\n\nby tracking only the phases in the first column. For example, XX -ZZ is represented as the bitstring 01.\n\nThis representation permits drastically faster simulation of entanglement purification circuits.\n\nThe BellState(n) constructor will create n Bell pairs.\n\njulia> bell_state = BellState([0,1,1,0])\nBellState(Bool[0, 1, 1, 0])\n\njulia> Stabilizer(bell_state)\n+ XX__\n- ZZ__\n- __XX\n+ __ZZ\n\nAs mentioned above, we can represent only Bell states. Here is the basis being used:\n\nBPGates notation Stabilizer tableaux Kets in X basis in Y basis\n00 +XX +ZZ ∣00⟩+∣11⟩ ∣++⟩+∣--⟩ ∣i₊i₋⟩+∣i₋i₊⟩\n01 +XX -ZZ ∣01⟩+∣10⟩ ∣++⟩-∣--⟩ ∣i₊i₊⟩-∣i₋i₋⟩\n10 -XX +ZZ ∣00⟩-∣11⟩ ∣+-⟩+∣-+⟩ ∣i₊i₊⟩+∣i₋i₋⟩\n11 -XX -ZZ ∣01⟩-∣10⟩ ∣+-⟩-∣-+⟩ ∣i₊i₋⟩-∣i₋i₊⟩\n\nYou can convert between these descriptions using\n\nBPGates to stabilizer state with QuantumClifford.Stabilizer(bpgates_state)\nstabilizer state to ket with QuantumOptics.Ket\n\n\n\n\n\n","category":"type"},{"location":"API/#BPGates.BellSwap","page":"API","title":"BPGates.BellSwap","text":"SWAP gate\n\n\n\n\n\n","category":"type"},{"location":"API/#BPGates.CNOTPerm","page":"API","title":"BPGates.CNOTPerm","text":"A bilateral CNOT preceded by permutations on each of the pairs that map the 00 state to itself.\n\n\n\n\n\n","category":"type"},{"location":"API/#BPGates.GoodSingleQubitPerm","page":"API","title":"BPGates.GoodSingleQubitPerm","text":"A single-qubit Clifford operation acting as a permutation that maps the 00 state to itself.\n\n\n\n\n\n","category":"type"},{"location":"API/#BPGates.NoisyBellMeasure","page":"API","title":"BPGates.NoisyBellMeasure","text":"A wrapper for BellMeasure that implements measurement noise.\n\n\n\n\n\n","category":"type"},{"location":"API/#BPGates.NoisyBellMeasureNoisyReset","page":"API","title":"BPGates.NoisyBellMeasureNoisyReset","text":"A wrapper for BellMeasure that implements measurement noise and Pauli noise after the reset.\n\n\n\n\n\n","category":"type"},{"location":"API/#BPGates.PauliNoiseBellGate","page":"API","title":"BPGates.PauliNoiseBellGate","text":"A wrapper for BellGate that implements Pauli noise in addition to the gate.\n\n\n\n\n\n","category":"type"},{"location":"API/#BPGates.PauliNoiseOp","page":"API","title":"BPGates.PauliNoiseOp","text":"PauliNoiseOp(idx,px,py,pz) causes qubit-pair idx to flip to one of the other 3 Bell states with probabilities px, py, pz respectively.\n\njulia> apply!(BellState([0,0]), PauliNoiseOp(1,1,0,0))\nBellState(Bool[0, 1])\n\njulia> apply!(BellState([0,0]), PauliNoiseOp(1,0,1,0))\nBellState(Bool[1, 1])\n\njulia> apply!(BellState([0,0]), PauliNoiseOp(1,0,0,1))\nBellState(Bool[1, 0])\n\n\n\n\n\n","category":"type"},{"location":"API/#BPGates.T1NoiseOp","page":"API","title":"BPGates.T1NoiseOp","text":"Simulates bilateral twirled T1 noise with per-qubit Kraus ops |0⟩⟨0| + √(1-λ) |1⟩⟨1| and √λ |0⟩⟨1|\n\n\n\n\n\n","category":"type"},{"location":"API/#BPGates.T2NoiseOp","page":"API","title":"BPGates.T2NoiseOp","text":"Simulates bilateral T2 noise with per-qubit Kraus ops √(1-λ/2) I and √(λ/2) Z\n\n\n\n\n\n","category":"type"},{"location":"API/#BPGates.bellmeasure!-Tuple{BellState, BellMeasure}","page":"API","title":"BPGates.bellmeasure!","text":"Apply coincidence measurement on a Bell state.\n\nReturn state and measurement result (false if an error is detected).\n\nThe measured state will be reset to 00.\n\njulia> bellmeasure!(BellState([0,1,1,1]), BellMeasure(2,1))\n(BellState(Bool[0, 0, 1, 1]), false)\n\n\n\n\n\n","category":"method"}]
}
